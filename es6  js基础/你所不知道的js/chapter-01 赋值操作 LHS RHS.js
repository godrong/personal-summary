function foo(a) {
    var b = a;
    return a + b;
    }
    var c = foo( 2 );
    1. 找出所有的 LHS 查询（这里有 3 处！）
    c = ..;、a = 2（隐式变量分配）、b = ..
    2. 找出所有的 RHS 查询（这里有 4 处！）
    foo(2..、= a;、a ..、.. b


        LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“=
        赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最
        好将其理解为“赋值操作的目标是谁（LHS）”以及“谁是赋值操作的源头
        （RHS）”。 

        LHS   （需要遍历作用域嵌套）赋值操作的目标是谁 
        RHS 谁是赋值操作的源头     

        不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式
地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛
出 ReferenceError 异常（严格模式下）。